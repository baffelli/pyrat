import os
import glob
import pyrat.fileutils.gpri_files as gpf
import pyrat
import pyrat.geo.geofun as geo
import pyrat.gpri_utils
from types import SimpleNamespace
import re
import json
import gdal



###############################################################################
##	Convert tif dem to gamma format
rule convert_dem:
    input:
        dem = "{name}.tif"
    output:
        gamma_dem = "{name}.dem",
        gamma_dem_par = "{name}.dem.par"
    script:
        './wrappers/geocoding/convert_dem.py'

###############################################################################
##	Rename DEM (to give it the same name as the DEM_SEG)
rule rename_dem:
    output:
        dem = "geo/{tablename}.dem",
        dem_par = "geo/{tablename}.dem.par"
    input:
        dem = config['geocoding']['DEM'],
        dem_par = config['geocoding']['DEM'] + '.par'
    script:
        './wrappers/geocoding/convert_dem.py'

###############################################################################
##	Rename MLI (to give it the same name as the DEM_SEG)
rule rename_mli:
    output:
        mli = "geo/{tablename}.mli",
        mli_par = "geo/{tablename}.mli.par"
    input:
        mli_par = config['geocoding']['ref_mli_par'],
        mli = config['geocoding']['ref_mli_par'].replace('.par','')
    run:
        shell("cp {input.mli_par} {output.mli_par}")
        shell("cp {input.mli} {output.mli}")


##############################################################################
##	This rule produces the geocoding LUT
rule geocoding_table:
    input:
        reference_mli_par = 'geo/{tablename}.mli.par',
        reference_mli = 'geo/{tablename}.mli',
        dem = 'geo/{tablename}.dem',
        dem_par = 'geo/{tablename}.dem.par',
    output:
        lut = "geo/{tablename}.gpri_to_dem",
        dem_seg = "geo/{tablename}.dem_seg",
        dem_seg_par = "geo/{tablename}.dem_seg.par",
        sim_sar = "geo/{tablename}.sim_sar",
        sim_sar_azd = "geo/{tablename}.sim_sar_azd",
        lv_theta = "geo/{tablename}.lv_theta",
        lv_phi = "geo/{tablename}.lv_phi",
        u = "geo/{tablename}.u",
        v = "geo/{tablename}.v",
        inc = "geo/{tablename}.inc",
        psi = "geo/{tablename}.psi",
        pix = "geo/{tablename}.pix",
        ls_map = "geo/{tablename}.ls_map",
    log:
        "logs/gc.log"
    params:
        lat_ovr = 1,
        lon_ovr = 1,
        frame = 100,
        diff_par = "geo/{tablename}_refinement.diff_par",
        offs= "geo/{tablename}_refinement.offs",
        ccp= "geo/{tablename}_refinement.ccp",
        lut_fine = "geo/{tablename}_refinement.gpri_to_dem_fine",
        scan_heading = config['geocoding']['scan_heading'],
        refine_table= config['geocoding'].get('refine_table')
    wildcard_constraints:
        ext = "(_initial)|(^$)"
    script:
        './wrappers/geocoding/geocoding_table.py'


##############################################################################
##	This rule geocodes an image represented in radar coordinates into dem coordinates
rule geocode_back:
    input:
        dem_seg_par = 'geo/' + config['geocoding']['table_name'] + '.dem_seg.par',
        lut	= 'geo/' + config['geocoding']['table_name'] + '.gpri_to_dem',
        reference_mli_par =  config['geocoding']['ref_mli_par'],
        data = "{data}"
    output:
        geocoded_file = "{data}_{ext,(gct)|(gc)}"
    log:
        "logs/gc.log"
    script:
        './wrappers/geocoding/geocoding_back.py'

##############################################################################
##	This is the forward transformation (DEM -> radar coordinates)
rule geocode_forward:
    input:
        dem_seg_par = 'geo/' + config['geocoding']['table_name'] + '.dem_seg.par',
        lut = 'geo/' + config['geocoding']['table_name'] + '.gpri_to_dem',
        reference_mli_par = 'geo/' + config['geocoding']['table_name'] + '.mli.par',
        data = "{data}"
    output:
        geocoded_file = "{data}_{ext,(fgct)|(fgc)}"
    log:
        "logs/gc.log"
    script:
        './wrappers/geocoding/geocode_forward.py'



rule sh_map:
    input:
        reference_mli_par =  config['geocoding']['ref_mli_par'],
        u = 'geo/{dataname}.u_fgc',
        theta = 'geo/{dataname}.lv_theta_fgc',
        inc = 'geo/{dataname}.inc_fgc',
        psi = 'geo/{dataname}.psi_fgc'
    output:
        sh_map = 'geo/{dataname}.sh_map'
    run:
        u, inc_par = gpf.load_dataset(input.reference_mli_par, input.u)
        inc, inc_par = gpf.load_dataset(input.reference_mli_par, input.inc)
        sh_map = geo.shadow_map(u, inc)
        sh_map.T.astype(gpf.type_mapping['UCHAR']).tofile(output.sh_map)



##############################################################################
###	This produces the inverted geocoding map (dem to radar)
#rule gc_map_inversion:
#	input:
#        dem_seg_par = "geo/{tablename}.dem_seg.par",
#        lut	= "geo/{tablename}.gpri_to_dem",
#        reference_mli_par ="geo/{tablename}.mli.par",
#	output:
#        inverse_lut = "geo/{tablename}.dem_to_gpri"
#	script:
#        './wrappers/geocoding/gc_map_inversion.py'
#

#############################################################################
##	This rule gproduces a geotiff from the data
#TODO fix it to make work with other file types
rule to_geotiff:
    input:
        file = "{filename}.{ext}",
        dem_seg_par = 'geo/' + config['geocoding']['table_name'] + '.dem_seg.par',
    output:
        gt = "{filename}.{ext}.tif"
    run:
        dt_code = gpf.gt_mapping_from_extension(input.file)
        print(dt_code)
        gt_cmd = "data2geotiff {{input.dem_seg_par}} {{input.file}} {dt_code}  {{output.gt}}".format(dt_code=dt_code)
        shell(gt_cmd)
#




















